<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
 	       http://www.springframework.org/schema/beans/spring-beans.xsd
 	       http://www.springframework.org/schema/context 
 	       http://www.springframework.org/schema/context/spring-context.xsd
 	       http://www.springframework.org/schema/tx 
 	       http://www.springframework.org/schema/tx/spring-tx.xsd
 	       http://www.springframework.org/schema/aop 
 	      http://www.springframework.org/schema/aop/spring-aop.xsd">
	<!-- 0 .1加载properties文件 -->
	<context:property-placeholder location="classpath:c3p0-db.properties" />
	<!-- 1 配置数据源，读取properties文件信息 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>
	<!-- 2 配置jdbc模板 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- 3配置dao -->
	<bean id="accountDao" class="cn.itcast.dao.impl.AccountDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate"></property>
	</bean>
	<!-- 4配置service -->
	<bean id="accountService" class="cn.itcast.service.impl.AccountServiceImpl">
		<property name="accountDao" ref="accountDao"></property>
	</bean>
	<!-- ★★★★★ xml事务配置 （重点） -->
	<!-- #1 事务管理器，依赖于数据源 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<!-- #2 编写通知：对事务进行增强(通知),需要编写对切入点和具体执行事务细节 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- <tx:method> 给切入点方法添加事务详情 name：方法名称， *表示任意方法名称， save* 以save开头 propagation 
				: 设置传播行为 isolation ： 隔离级别 read-only:是否只读 -->
			<tx:method name="*" propagation="REQUIRED" isolation="DEFAULT"
				read-only="false" />
		</tx:attributes>
	</tx:advice>
	<!-- #3 aop 编写，让spring自动对目标生成代理，需要使用AspectJ的表达式 -->
	<aop:config>
		<!-- #3.1 切入点 -->
		<aop:pointcut expression="execution(* cn.itcast.service..*.*(..))"
			id="txPointCut" />
		<!-- #3.1 切面：将切入点与通知整合 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointCut" />
	</aop:config>
</beans>
